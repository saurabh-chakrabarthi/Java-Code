# 4-Week Coding Interview Preparation Plan
*Based on High ROI Patterns + Strategic Additions*

## Week 1: Arrays, Two Pointers & Sliding Window Foundation

| Day | Problem 1 | Problem 2 | Pattern Focus | Completed |
|-----|-----------|-----------|---------------|-----------|
| 1 | ☐ [1. Two Sum](https://leetcode.com/problems/two-sum/) | ☐ [167. Two Sum II - Input Array Is Sorted](https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/) | Hash Map + Two Pointers | ☐ |
| 2 | ☐ [125. Valid Palindrome](https://leetcode.com/problems/valid-palindrome/) | ☐ [680. Valid Palindrome II](https://leetcode.com/problems/valid-palindrome-ii/) | Two Pointers Mastery | ☐ |
| 3 | ☐ [26. Remove Duplicates from Sorted Array](https://leetcode.com/problems/remove-duplicates-from-sorted-array/) | ☐ [283. Move Zeroes](https://leetcode.com/problems/move-zeroes/) | In-place Array Manipulation | ☐ |
| 4 | ☐ [3. Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/) | ☐ [209. Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/) | Sliding Window Introduction | ☐ |
| 5 | ☐ [567. Permutation in String](https://leetcode.com/problems/permutation-in-string/) | ☐ [438. Find All Anagrams in a String](https://leetcode.com/problems/find-all-anagrams-in-a-string/) | Fixed Size Sliding Window | ☐ |
| 6 | ☐ [76. Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/) | ☐ [121. Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/) | Variable Size Window + DP Intro | ☐ |
| 7 | ☐ **Review Day:** Redo 2 hardest problems from Week 1 | ☐ **Mock Interview:** Practice explaining solutions | Consolidation | ☐ |

## Week 2: Strings, Stacks, Trees & Graph Traversal

| Day | Problem 1 | Problem 2 | Pattern Focus | Completed |
|-----|-----------|-----------|---------------|-----------|
| 8 | ☐ [242. Valid Anagram](https://leetcode.com/problems/valid-anagram/) | ☐ [49. Group Anagrams](https://leetcode.com/problems/group-anagrams/) | String Hashing & Grouping | ☐ |
| 9 | ☐ [20. Valid Parentheses](https://leetcode.com/problems/valid-parentheses/) | ☐ [22. Generate Parentheses](https://leetcode.com/problems/generate-parentheses/) | Stack + Backtracking Preview | ☐ |
| 10 | ☐ [104. Maximum Depth of Binary Tree](https://leetcode.com/problems/maximum-depth-of-binary-tree/) | ☐ [226. Invert Binary Tree](https://leetcode.com/problems/invert-binary-tree/) | Basic Tree Operations | ☐ |
| 11 | ☐ [102. Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/) | ☐ [994. Rotting Oranges](https://leetcode.com/problems/rotting-oranges/) | BFS Pattern | ☐ |
| 12 | ☐ [200. Number of Islands](https://leetcode.com/problems/number-of-islands/) | ☐ [695. Max Area of Island](https://leetcode.com/problems/max-area-of-island/) | DFS on Grids | ☐ |
| 13 | ☐ [733. Flood Fill](https://leetcode.com/problems/flood-fill/) | ☐ [417. Pacific Atlantic Water Flow](https://leetcode.com/problems/pacific-atlantic-water-flow/) | Multi-source DFS | ☐ |
| 14 | ☐ **Review Day:** Tree & Graph pattern recognition | ☐ **Practice:** Draw solutions on paper | Visualization Skills | ☐ |

## Week 3: Backtracking, Binary Search & Advanced Trees

| Day | Problem 1 | Problem 2 | Pattern Focus | Completed |
|-----|-----------|-----------|---------------|-----------|
| 15 | ☐ [46. Permutations](https://leetcode.com/problems/permutations/) | ☐ [78. Subsets](https://leetcode.com/problems/subsets/) | Backtracking Fundamentals | ☐ |
| 16 | ☐ [77. Combinations](https://leetcode.com/problems/combinations/) | ☐ [39. Combination Sum](https://leetcode.com/problems/combination-sum/) | Backtracking with Constraints | ☐ |
| 17 | ☐ [79. Word Search](https://leetcode.com/problems/word-search/) | ☐ [494. Target Sum](https://leetcode.com/problems/target-sum/) | 2D Backtracking + DFS | ☐ |
| 18 | ☐ [704. Binary Search](https://leetcode.com/problems/binary-search/) | ☐ [34. Find First and Last Position of Element in Sorted Array](https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/) | Binary Search Template | ☐ |
| 19 | ☐ [153. Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/) | ☐ [33. Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/) | Modified Binary Search | ☐ |
| 20 | ☐ [98. Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/) | ☐ [235. Lowest Common Ancestor of a Binary Search Tree](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/) | BST Properties | ☐ |
| 21 | ☐ **Review Day:** Backtracking & Binary Search mastery | ☐ **Challenge:** Solve 1 problem in under 15 minutes | Speed Building | ☐ |

## Week 4: Dynamic Programming, Heaps & Advanced Patterns

| Day | Problem 1 | Problem 2 | Pattern Focus | Completed |
|-----|-----------|-----------|---------------|-----------|
| 22 | ☐ [70. Climbing Stairs](https://leetcode.com/problems/climbing-stairs/) | ☐ [746. Min Cost Climbing Stairs](https://leetcode.com/problems/min-cost-climbing-stairs/) | DP Fundamentals | ☐ |
| 23 | ☐ [198. House Robber](https://leetcode.com/problems/house-robber/) | ☐ [213. House Robber II](https://leetcode.com/problems/house-robber-ii/) | DP with Constraints | ☐ |
| 24 | ☐ [322. Coin Change](https://leetcode.com/problems/coin-change/) | ☐ [300. Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/) | Unbounded DP + LIS | ☐ |
| 25 | ☐ [215. Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/) | ☐ [347. Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/) | Heap & QuickSelect | ☐ |
| 26 | ☐ [703. Kth Largest Element in a Stream](https://leetcode.com/problems/kth-largest-element-in-a-stream/) | ☐ [295. Find Median from Data Stream](https://leetcode.com/problems/find-median-from-data-stream/) | Heap Design Problems | ☐ |
| 27 | ☐ [56. Merge Intervals](https://leetcode.com/problems/merge-intervals/) | ☐ [435. Non-overlapping Intervals](https://leetcode.com/problems/non-overlapping-intervals/) | Interval & Greedy | ☐ |
| 28 | ☐ **Final Review:** 3 hardest problems from entire month | ☐ **Mock Interview:** Full 45-minute simulation | Final Assessment | ☐ |

## Key Additions to Your Original List

### Essential Missing Patterns Added:
- **238. Product of Array Except Self** *(Critical array pattern)*
- **21. Merge Two Sorted Lists** *(Linked list fundamental)*
- **206. Reverse Linked List** *(Most common linked list problem)*
- **141. Linked List Cycle** *(Floyd's algorithm)*
- **56. Merge Intervals** *(High-frequency pattern)*
- **252. Meeting Rooms** *(If available in your region)*

### High-Impact Tree Problems Added:
- **104. Maximum Depth of Binary Tree**
- **226. Invert Binary Tree**
- **98. Validate Binary Search Tree**
- **235. Lowest Common Ancestor of BST**

## Daily Success Protocol
- ☐ **5 min:** Read and understand both problems
- ☐ **35 min:** Solve problems (17.5 min each max)
- ☐ **10 min:** Review solutions and note patterns
- ☐ **5 min:** Update progress and plan tomorrow

## Pattern Mastery Checklist
- ☐ **Two Pointers:** Can solve any variant in under 20 minutes
- ☐ **Sliding Window:** Recognize fixed vs variable window immediately
- ☐ **BFS/DFS:** Comfortable with both recursive and iterative approaches
- ☐ **Backtracking:** Can generate all permutations/combinations confidently
- ☐ **Binary Search:** Master the template and handle edge cases
- ☐ **DP:** Identify optimal substructure and write recurrence relations
- ☐ **Heaps:** Know when to use min-heap vs max-heap

## Backup Problems (If You Finish Early)
- [11. Container With Most Water](https://leetcode.com/problems/container-with-most-water/)
- [15. 3Sum](https://leetcode.com/problems/3sum/)
- [139. Word Break](https://leetcode.com/problems/word-break/)
- [208. Implement Trie](https://leetcode.com/problems/implement-trie-prefix-tree/)

**Total Problems:** 56 problems (52 main + 4 backup)
**Success Target:** Complete 90% within time limits
**Interview Readiness:** Explain approach + code + complexity for each pattern